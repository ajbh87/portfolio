@mixin media-query($device) {
  @media screen and (min-width: $device) {
    @content; 
  }
}

@mixin color-mix($c1, $c2, $t, $a: "color", $s: "", $o: 0, $repeat: 1) {
  $p: 100 / ($t - 1);
  $r: $repeat + 'n + ';

  @for $i from 1 through $t - $o {
    &:nth-child(#{$r + $i}) #{$s}{
      $f: $p * ($i - 1 + $o);
      $t: percentage($f/100);
      #{$a}: mix($c2, $c1, $t);
    }
  }
}

@mixin attr-iterator($attr, $size, $prefix: $attr) {
  $dirs: all, top, right, bottom, left;
  @each $dir in $dirs {
    $full-attr: '';
    @if $dir == all {
      $full-attr: $attr;
    }
    @else {
      $full-attr: #{$attr}-#{$dir};
    }
    .#{$prefix}--#{$dir} {
      #{$full-attr}: $size;
    }
  }
}

//---------------- Clip Animation
@function generateValues ($from, $to, $steps){
  $val1: $to / $steps;

  $list: $from, $val1;
  @for $i from 2 through $steps - 1 {
    $value: $val1 * $i;
    $list: append($list, $value);
  }
  $list: append($list, $to);
  @return $list;
}
@function generateInverseValues ($from, $to, $steps, $values){
  $list: $steps * 10;
  @each $val in $values {
    @if $val != 0 {
      $list: append($list, 1/$val);
    }
  }
  @return $list;
}
@mixin clipAnimation($from: 0, $to: 1, $name: 'someting', $name2: 'anotherThing', $steps: 100, $prop: scale ) {
  $valuesList: generateValues($from, $to, $steps);
  $inverseValuesList: generateInverseValues($from, $to, $steps, $valuesList);
  
  $percentList: 0%;
  @for $i from 1 through $steps {
    $c: 1 / $steps;
    //cubic easing out
    $v:  ($c * ($i * $i * $i + 1) + 1)/$steps; 
    //quadratic easing in
    //$v:  $c * $i * $i + 1;
    
    $text: $v + '%';
    $percentList: append($percentList, $text);
  }

  @keyframes #{$name}{
    @for $i from 1 through $steps + 1 {
      $percent: nth($percentList, $i);
      $value: nth($valuesList, $i);
      $text: $prop + "(" + $value + ")";
      #{$percent} { transform: #{$text}; }
    }
  }
  @keyframes #{$name}Inverse {
    @for $i from 1 through $steps + 1 {
      $percent: nth($percentList, $i);
      $value: nth($inverseValuesList, $i);
      $text: $prop + "(" + $value + ")";
      #{$percent} { transform: #{$text}; }
    }
  }
  
  @keyframes #{$name2}{
    $i: $steps + 1;
    @while $i > 0 {
      $percent: nth($percentList, ($steps + 2 - $i));
      $value: nth($valuesList, $i);
      $text: $prop + "(" + $value + ")";
      #{$percent} { transform: #{$text}; }
      $i: $i - 1;
    }
  }
  @keyframes #{$name2}Inverse {
    $i: $steps + 1;
    @while $i > 0 {
      $percent: nth($percentList, ($steps + 2 - $i));
      $value: nth($inverseValuesList, $i);
      $text: $prop + "(" + $value + ")";
      #{$percent} { transform: #{$text}; }
      $i: $i - 1;
    }
  }
}